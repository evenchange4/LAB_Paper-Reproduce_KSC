# Autogenerated with SMOP version 0.23
# main.py ksc_toy/ksc_toy.m -o ksc_toy/ksc_toy.py
from __future__ import division
import numpy as np
from scipy.io import loadmat,savemat
import os

def ksc_toy(A, K):
    """[mem cent] = ksc_toy(A,K)
    K-SC toy implementation
    Input
    A: A set of time series. Each row vector A(i,:) corresponds to each time series
    K: The number of clusters 

    Output
    mem = Membership for each time series. mem(i) = the cluster index that
    time series i belongs to
    cent = A set of cluster centroids. Each row vector cent(i,:) corresponds
    to each cluster centroids
    """
    m = A.shape[0]
    mem = ceil(np.dot(K, rand(m, 1)))
    cent = np.zeros(shape=(K, A.shape[1]), dtype='float64')
    for iter_ in range(1, 101):
        prev_mem = mem
        for k in range(1, (K +1)):
            cent[(k -1), :] = ksc_center(mem, A, k, cent[(k -1), :])
        for i in range(1, (m +1)):
            x = A[(i -1), :]
            for k in range(1, (K +1)):
                y = cent[(k -1), :]
                dist = dhat_shift(x, y)
                D[(i -1), (k -1)] = dist
        val, mem = np.min(D, np.array([]), 2) # nargout=2
        if norm(prev_mem - mem) == 0:
            break
    return mem, cent
