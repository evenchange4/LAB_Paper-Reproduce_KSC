# Autogenerated with SMOP version 0.23
# main.py ksc_toy/ksc_center.m -o ksc_toy/ksc_center.py
from __future__ import division
import numpy as np
from scipy.io import loadmat,savemat
import os

def ksc_center(mem, A, k, cur_center):
    """Computes ksc centroid
    """
    a = np.array([])
    for i in range(1, (max(mem.shape) +1)):
        if mem[(i -1)] == k:
            if np.sum(cur_center) == 0:
                opt_a = A[(i -1), :]
            else:
                tmp, tmps, opt_a = dhat_shift(cur_center, A[(i -1), :]) # nargout=3
            a = np.array([a, opt_a]).reshape(1, -1)
    if a.shape[0] == 0:
        ksc = np.zeros(shape=(1, A.shape[1]), dtype='float64')
        return ksc
    b = a / repmat(sqrt(np.sum(a ** 2, 2)), np.array([1, a.shape[1]]).reshape(1, -1))
    M = np.dot(b.T, b) - np.dot(a.shape[0], eye(a.shape[1]))
    V, D = eig(M) # nargout=2
    ksc = V[:, -1]
    if np.sum(ksc) < 0:
        ksc = - ksc
    return ksc
